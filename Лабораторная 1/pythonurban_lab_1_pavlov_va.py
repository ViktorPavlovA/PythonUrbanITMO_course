# -*- coding: utf-8 -*-
"""PythonUrban_lab_1 Pavlov VA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vb1CpWoaIG2tNoq6P_WuzdQPOf5nWQV2

## list comprehension

### Обработка каждого элемента
"""

cart = [3, 4, 12, 17, 19, 21, 23, 26, 30]

cashier = []  # новый список с помощью метода append
for item in cart:
    cashier.append(item)
print(cashier)

cashier = [item for item in cart]
print(cashier)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-1.png)

### Фильтрация элементов
"""

cart = [5, 7, 9, 10, 12, 15, 19, 20, 22]

cashier_3 = []
for item in cart:
    if item % 2 == 0:  # только четные
        cashier_3.append(item)
print(cashier_3)

cashier_3 = [item for item in cart if item % 2 == 0]
print(cashier_3)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-2.png)

## Задачи

##### ***Задача 1. Сделать название городов с заглавной буквы. DONE***
Написать функцию task_1, которая будет принимать список названий городов, а возвращать новый список, в котором в каждой строке первая буква будет заглавной, а все остальные строчные.
"""

list_cities = ["москва", "иЖЕВСк", "Владивосток", "новосибирсК", "мУРМАНСК"]
# TODO написать функцию task_1

#Вариант 1

def task_1(list_cities1):
    new_list_cities1 = []
    for i in list_cities1:
        new_city = (i.lower()).title()
        # print(new_city) #Проверка результатов
        new_list_cities1.append(new_city)
    return new_list_cities1

#Вариант 2

def task_1_1(list_cities1):
    new_list_cities1 =[(name.lower()).title() for name in list_cities1]
    return new_list_cities1

#Вызов функций

new_list_cities = task_1(list_cities)  # TODO вызвать функцию и получить новый результат исходного списка list_cities

new_list_cities2 =task_1_1(list_cities)

#Вывод


print(f"Вариант 1: {new_list_cities}")  # ['Москва', 'Ижевск', 'Владивосток', 'Новосибирск', 'Мурманск']
print(f"Вариант 2: {new_list_cities2}")

"""##### ***Задача 2. Отфильтровать города с населением больше 1 млн. человек.DONE***

Написать функцию task_2, которая будет принимать два аргумента список городов и численность населения.  
Функция должна возвращать новый отфильтрованный список городов, где остались города только с население больше 1 млн. человек


"""

list_dict_cities = [
    {
        "name": "Москва",
        "population": 12 * 10 ** 6,
    },
    {
        "name": "Санкт-Петербург",
        "population": 5 * 10 ** 6,
    },
    {
        "name": "Ижевск",
        "population": 0.6 * 10 ** 6,
    },
]

filter_population = 10 ** 6


# TODO написать функцию task_2
# Вариант 1
def task_2 (name_cities,population_cities):
    list_names_clear =[]
    for count,i in enumerate(population_cities):
        if i >filter_population:
            list_names_clear.append({'name':name_cities[count],'population':i})
    return list_names_clear

list_names =[]
list_pop =[]

for i in list_dict_cities:
    list_names.append(i["name"])
    list_pop.append(i["population"])

# Вариант 2
def task_2_1 (name_cities,filter_population):

    list_names =[i['name'] for i in name_cities]
    list_pop = [i['population'] for i in name_cities] 

    list_names_clear = [{'name':list_names[count], 'population':i} for count,i in enumerate(list_pop) if i >filter_population]

    # print(list_names_clear)

    return list_names_clear

# Вариант 3
def task_2_2 (name_cities,filter_population):

    list_names_clear = [city for city in name_cities if city['population']>filter_population ]

    return list_names_clear


# Вызов функций

new_list_dict_cities = task_2(list_names,list_pop) # TODO вызвать функцию и передать в неё значения list_dict_cities и filter_population

new_list_dict_cities2 = task_2_1(list_dict_cities,filter_population) # воспользуемся вариантом 2

new_list_dict_cities3 = task_2_2(list_dict_cities,filter_population)# воспользуемся вариантом 3

#Вывод 

print(f"Вариант 1{new_list_dict_cities}")  # [{'name': 'Москва', 'population': 12000000}, {'name': 'Санкт-Петербург', 'population': 5000000}]

print(f"Вариант 2{new_list_dict_cities2}")

print(f"Вариант 3{new_list_dict_cities3}")

"""##### ***Задача 3. Найти общие города среди двух групп и отсортировать их в алфавитном порядке.DONE***

Написать функцию task_3, которая будет принимать 2 списка городов, а возвращать новый список, в котором будут города, которые есть в двух группах.  
Результат функции должен быть отсортирован в алфавитном порядке. 

"""

fisrt_group = ["Москва", 'Владивосток', "Санкт-Петербург"]
second_group = ['Новосибирск', "Ижевск", "Санкт-Петербург", "Москва"]

# TODO Написать функцию task_3
#Вариант 1
def task3(group1,group2):
    list_city =[]
    for i in group2:
        if i in group1:
            list_city.append(i)
    # print(list_city)
    return sorted(list_city)
#Вариaнат 2
def task3_1(group1,group2):
    list_city = [same_element for same_element in group2 if same_element in group1]
    return sorted(list_city)


#Вызов функций

common_cities = task3(fisrt_group,second_group)  # TODO вызвать функцию и передать в неё значения fisrt_group и second_group
common_cities1 = task3_1(fisrt_group,second_group)  # TODO вызвать функцию и передать в неё значения fisrt_group и second_group

#Вывод 

print(f"Вариант 1: {common_cities}")  # ['Москва','Санкт-Петербург'] 
print(f"Вариант 2: {common_cities1}")

"""##### ***Задача 4. Найти количество упоминаний заданного города.DONE***

У списка есть метод `count`, этот метод принимает значение,  
и считает сколько раз он содержится в списке.  

Написать функцию `task_4`, которая принимает два аргумента список городов,  
где нужно искать заданный город.  
И искомый город, количество упоминаний которого нужно подсчитать.
Результатом должно быть количество вхождений города в списке.

Города записанные в разных регистрах, считаются одинаковыми.
"""

list_cities = [  # список городов
    'Новосибирск',
    'Владивосток',
    'Москва',
    'санкт-петербург',
    'Владивосток',
    'Москва',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Владивосток',
    'Ижевск',
    'САНКТ-ПЕТЕРБУРГ',
    'Владивосток',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Москва',
    'Санкт-Петербург'
]
find_city = 'Санкт-Петербург'  # искомый город

# написать функцию task_4
#Вариант 1 

def task_4(list_c,city):
    for i in range(len(list_c)):
        list_c[i]=list_c[i].lower()
    city = city.lower()
    count_c = list_c.count(city)
    return count_c

#Варинат 2

def task_4_1(list_c,city):
    
    city = len([i for i in list_c if i.lower() == city.lower()])

    return city



#Вызов функций

count_cities = task_4(list_cities,find_city)  # TODO вызвать функцию и передать в неё значения list_cities и find_city

count_cities2 = task_4_1(list_cities,find_city)  # TODO вызвать функцию и передать в неё значения list_cities и find_city

#Вывод

print(f"Вариант 1: {count_cities}")  # 4

print(f"Вариант 2: {count_cities2}")  # 4

"""##### ***Задача 5. Средний индекс озеленения. DONE***

Дан список словарей территорий, где `territory_area` - площадь территории, а `green_zones` список площадей зеленых зон.  
Написать две функции:
- первая будет принимать исходный список городов, и возвращать новый список словарей, в котором для каждой территории посчитан индекс индекс озеленения, как отношение площади зеленых зон к площади территории. Новые словари в списке должен содержать название территории и её индекс озеленения. 
- вторая функция принимает список словарей, в которых посчитаны индексы озеленения для каждой территории и возвращает средний индекс озеленения по всем территориям. 
"""

from IPython.lib.security import passwd
from os import name
list_territories = [
    {
        "territory_name": "Пушкин",
        "territory_area": 28676,
        "green_zones": [302, 487, 420, 325, 471, 363, 404]
    },
    {
        "territory_name": "Павловск",
        "territory_area": 21025,
        "green_zones": [360, 375, 223, 258, 345, 296, 303]
    },
    {
        "territory_name": "Петергоф",
        "territory_area": 44274,
        "green_zones": [364, 447, 438, 223, 336, 431, 442]
    },
]



# TODO написать функцию, которая будет высчитывать индексы озеленения для каждой территории

#Вариант 1 для первой функции
def have_fun1(list_ter):
    names1 =[]
    sum_green=[]
    list_area =[]
    id_green =[]
    list_result =[]
    for i in list_ter:
        names1.append(i["territory_name"])
        list_area.append(i["territory_area"])
        sum_green.append(sum(i["green_zones"]))
    for count,i in enumerate(list_area):
        id_green.append(sum_green[count]/i)

    for count,i in enumerate(names1):
        list_result.append({"territory_name":i,"green_id":id_green[count]})
    return list_result

#Вариант 2 для первой функции
def not_fun1 (list_ter):
    names1 = [i["territory_name"] for i in list_ter]
    list_area = [i["territory_area"] for i in list_ter]
    list_result = [{"territory_name":names1[count],"green_id":sum(i["green_zones"])\
                    /list_area[count]} for count,i in enumerate(list_ter)] 
    return list_result   

#Вызов функций 
list_green_id = have_fun1(list_territories)
list_green_id1 = not_fun1(list_territories)

#Вывод
print(f"Вариант 1, индекса озеленения: {list_green_id}")
print(f"Вариант 2, индекса озеленения: {list_green_id1}")
print("_"*120)


# TODO написать функцию, которая будет высчитывать средний индекс озеленения по всем территориям

#Вариант 1 для второй функции

def have_fun2(green_id):
    list_id=[]
    for i in green_id:
        list_id.append(i["green_id"])
    avg_green = sum(list_id)/len(list_id)
    return avg_green

#Варинат 2 для второй функции 
def not_fun2(list_territories):
    list_id = [i["green_id"] for i in list_territories]
    return sum(list_id)/len(list_id)

avg_value_green = have_fun2(list_green_id )

avg_value_green2 = not_fun2(list_green_id1)
# TODO распечатать результат округленный до 4 знаков после запятой
print(f"Вариант 1: {round(avg_value_green,4)}")
print(f"Вариант 2: {round(avg_value_green2,4)}")
print("_"*120)